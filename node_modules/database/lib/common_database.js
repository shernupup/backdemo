/*
*  create by tonyce Gu 14-8-17
*
*/

var mongodb = require('mongodb');
var mongodbConfig = require('./config/mongodb_config.json');
var cache = {};

var mysql = require('mysql');
var mysqlConfig = require('./config/mysqldb_config.js');
var MysqlConnector = function (host, user, password, database, connectionLimit){
    this.connect = mysql.createPool({
        host: host || 'sp50c0862d6808d1.mysql.rds.aliyuncs.com',
        user: user || 'test_v2_iweek_me',
        password: password || 'iweek_me',
        database: database || 'test_v2_iweek_me',
        connectionLimit : connectionLimit || 1
    });
//    console.log('数据库于：' + new Date().toLocaleTimeString() + ' 建立连接\n处理进程PID: ' + process.pid);
};
exports.MysqlConnector = MysqlConnector;

var MongoDBConnector = function (url, options) {
    this.connection = connect(url, options);
}

exports.MongoDBConnector = MongoDBConnector;

MongoDBConnector.prototype = {

    constructor: MongoDBConnector,

    find: function (collectionName, queryCondition, selectFields, callback) {
        this.connection(function (db) {
            if(db) {
                collectionName = collectionName.replace(/(^\s*)|(\s*$)/g, "");
                db.collection(collectionName).find(queryCondition, selectFields).toArray(function (err, docs) {
                    if (err) {
                        console.log(err);
                        callback(err);
                    }
                    // console.dir('find something: '+docs);
                    callback(null, docs);
                });
            }else{
                callback('数据库连接错误');
            }
        });
    },

    insert: function (collectionName, actionCondition, callback) {
        this.connection(function (db) {
            if(db) {
                collectionName = collectionName.replace(/(^\s*)|(\s*$)/g, "");
                db.collection(collectionName).insert(actionCondition, {w: 1}, function (err, objects) {
                    if (err) {
                        console.warn('--' + err.message);
                    }
                    if (err && err.message.indexOf('E11000') !== -1) {
                        // this _id was already inserted in the database
                        console.log("has insert");
                        callback('404');
                    } else {
                        // console.log("has insert..." + objects);
                        callback(null, objects);
                    }
                });
            }else{
                callback('数据库连接错误');
            }
        });
    },

    update: function (collectionName, queryCondition, actionCondition, optionCondition, callback) {
        this.connection(function (db) {
            if(db) {
                collectionName = collectionName.replace(/(^\s*)|(\s*$)/g, "");
                db.collection(collectionName).update(queryCondition, actionCondition, optionCondition, function (err, object) {
                    if (err) {
                        console.warn(err.message);
                        callback(err);
                    } else {
                        // log('successfully updated: ' + object);
                        callback(null, object);
                    }
                });
            }else{
                callback("数据库连接出错");
            }
        });
    },

    removeField: function  (collectionName, queryCondition) {
        this.connection(function (db) {
            if(db) {
                collectionName = collectionName.replace(/(^\s*)|(\s*$)/g, "");
                db.connection(collectionName, function (err, collection) {
                    collection.remove(queryCondition, function (err, removed) {
                        console.log(removed);
                    });
                });
            }else{
                callback("数据库连接出错");
            }
        });
    },

    removeCollection: function (collectionName, queryCondition) {
        this.connection(function (db) {
            if(db) {
                collectionName = collectionName.replace(/(^\s*)|(\s*$)/g, "");
                db.collection(collectionName).remove(queryCondition, function (err, numberRemoved) {
                    console.log("inside remove call back " + numberRemoved);
                });
            }else{
                callback("数据库连接出错");
            }
        });
    },

    findAndModify: function (collectionName, queryCondition, actionCondition, callback) {
        this.connection(function (db) {
            //                                          (query, sort, update, options, callback)
            db.collection(collectionName).findAndModify(queryCondition, [['_id','asc']], actionCondition, {upsert: true, new: true}, function(err, object) {
                if (err) {
                    console.warn(err.message);
                }else {
                    console.dir(object);  // undefined if no matching object exists.
                    callback(null, object);
                }
            });
        });
    }
};
////////////////////////////////////////////////////////////////////////////
function connect (url, options) {
    var fns = [], status = 0, _db = cache[url];
    return function (f) {
        var args = arguments;
        if (_db !== null && typeof _db === 'object') {
            f.call(null, _db);
            return;
        }
        fns.push(f);
        // 当有一个连接初始化请求时，挂起其他初始化请求
        // 连接池建立完后，使用该连接处理挂起的请求
        if (status === 0) {
            status = 1;
            mongodb.MongoClient.connect(url, options, function (err, db) {
                if (err) { console.log(err); }
                _db = cache[url] = db;
                for (var i = 0, len = fns.length; i < len; i++) {
                    fns.shift().call(null, _db);
                }
            });
        }
    };
}
///-----------------------------------------------------------------------///
MysqlConnector.prototype = {

    constructor: MysqlConnector,
    
    getConnection: function (cb, retryCount){
        if (retryCount === undefined)
            retryCount = 0;
        var self = this;
        this.connect.getConnection(function (err, conn){
             // console.log('------------已经连接');
            if (err != null && retryCount < 60) {
                console.log(err);
                setTimeout(function (){
                    self.getConnection(cb, retryCount + 1);
                }, 1000);
            } else {
                cb(err, conn);
            }
        });
    },

    query: function (sql, cb, retryCount){
        if (retryCount === undefined)
            retryCount = 0;
        var self = this;
        this.getConnection(function (err, conn){
            if (err == null) {

                conn.query(sql, function(err,rows,fields){
                    if (err!=null&&retryCount < 2) {
                        console.log("query err: "+err);
                        setTimeout(function() {
                            self.query(sql, cb, retryCount + 1);
                        }, 1000);
                    } else {
                        cb(err, rows, fields)
                    }
                });
                conn.release();
            } else {
                cb(err, rows, fields);
            }
        });
    },

    insertDataToDB: function (table, fields, callback){//table为被插入数据的数据表， fields为键值的字典
        var field = [];
        var value = [];
        var sql;

        for (var key in fields){
            if(fields.hasOwnProperty(key)) {
                field.push(noSqlInject(key));
                value.push('"'+ noSqlInject(""+fields[key]) +'"')
            }
        }
        field = field.join(',');
        value = value.join(',');
        sql = 'insert into '+ noSqlInject(table) + '(' +field+ ') values (' +value+ ')';

        console.log('sql: '+sql);
        this.query(sql, function (err, backInfo, fields) { //插入返回的是一个对象{ fieldCount: 0,affectedRows: 1,insertId: 5,serverStatus: 2,warningCount: 0,message: '',protocol41: true,changedRows: 0 }
            if (err) {
                callback(err);
            }else{
                callback(err, backInfo);
            }
        });
    },

    updateDataToDB: function (table, fields, selectCondition, callback) {//table为被插入数据的数据表， fields为键值的字典, id为被更新的记录的索引
        var field = "",
            value = "",
            userValue = "",
            keyValue = "";
            
        for ( var key in fields) {
            if(fields.hasOwnProperty(key)) {
                userValue = noSqlInject(""+fields[key]);
                keyValue += (noSqlInject(key) +'=' + '"'+ userValue +'" ,');
            } 
        }
        keyValue = keyValue.substring(0, keyValue.length - 1);
        var sql = 'update ' + noSqlInject(table) + ' set ' +keyValue + ' where ' + selectCondition;
//		console.log(sql)
        this.query(sql, function (err, rows, fields) {
            callback(err, rows);
        });
    },

    updateDataToDB_S: function (table, fields, selectCondition, selectConditionValue, callback) {//table为被插入数据的数据表， fields为键值的字典, id为被更新的记录的索引
        var field = "",
            value = "",
            userValue = "",
            keyValue = "",
            sql = "";

        for ( var key in fields) {
            if(fields.hasOwnProperty(key)) {
                if (typeof fields[key] === 'string') {
                    userValue = noSqlInject(fields[key]);
                }else if (typeof fields[key] === 'number') {
                    userValue = parseInt(fields[key]);
                }else {
                    userValue = fields[key] || "";
                    continue;
                }
                keyValue += (noSqlInject(key) +'=' + '"'+ userValue+'" ,');
            } 
        }
        keyValue = keyValue.substring(0, keyValue.length - 1);//最有一个为 “，”要舍去
        if (typeof selectConditionValue === 'number') {
            sql = 'update ' + noSqlInject(table) + ' set ' +keyValue + ' where ' + noSqlInject(selectCondition)  + parseInt(selectConditionValue);
        }else{
            sql = 'update ' + noSqlInject(table) + ' set ' +keyValue + ' where ' + noSqlInject(selectCondition) + ' "' + noSqlInject(selectConditionValue) + '"';
        }
//         console.log(sql);
        this.query(sql, function (err, row, fields) {
            callback(err, row);
        });
    },


    getDataFromDB: function (table, selectColArr, selectCondition, selectConditionValue, callback) {
        var selectFiled = '';

        selectFiled = (selectColArr.length === 0 ) ? ' * ' : selectColArr.join(',') ;
        var sql = 'select ' + noSqlInject(selectFiled) +' from ' + noSqlInject(table) ;
        if (selectCondition && selectConditionValue) {
            if (typeof selectConditionValue === 'number') {
                // sql += ' where ' + noSqlInject(selectCondition)  + parseInt(selectConditionValue) + ' limit 1';
                sql += ' where ' + noSqlInject(selectCondition)  + parseFloat(selectConditionValue) + ' limit 1';
            }else{
                sql += ' where ' + noSqlInject(selectCondition) + ' "' + noSqlInject(selectConditionValue) + '" ' + ' limit 1';
            }
        }else {
            sql += ' where ' + noSqlInject(selectCondition) + ' = "' + noSqlInject(selectConditionValue) + '" ' + ' limit 1';
        }
        // log("+++++->"+sql);
        this.query(sql, function (err, rows, fields) {
            if (err) {
                callback(err, null);
            }else{
                callback(err, rows[0]);
            }
        });
    },

    getDataFromDB_S: function (table, selectColArr, selectConditionArr, selectConditionValueArr, callback) {
        var selectFiled = '';
        var selectStr = '';
        var selectArr = [];
        selectFiled = (!selectColArr||selectColArr.length === 0 ) ? ' * ' : selectColArr.join(',') ;
        var sql = 'select ' + noSqlInject(selectFiled) +' from '+ noSqlInject(table);
        if (selectConditionArr && selectConditionValueArr) {
            for (var i = 0; i < selectConditionArr.length; i++) {
                var selectCondition = selectConditionArr[i];
                var selectConditionValue = selectConditionValueArr[i];
            
                if (typeof selectConditionValue === 'number') {
                    selectArr.push( noSqlInject(selectCondition)  + parseInt(selectConditionValue) );
                }else{
                    selectArr.push( noSqlInject(selectCondition) + ' "' + noSqlInject(selectConditionValue) + '" ');
                }
            };
            selectStr = selectArr.join(' and ');
            sql = 'select ' + noSqlInject(selectFiled) +' from ' + noSqlInject(table) + ' where ' + selectStr ;
        }else {
            // callback('server wrong');
            // return;
            sql = 'select ' + noSqlInject(selectFiled) +' from ' + noSqlInject(table) + ' where ' + selectStr ;
        }
        // var selectStr = selectArr.join(' and ');
        // var sql = 'select ' + noSqlInject(selectFiled) +' from ' + noSqlInject(table) + ' where ' + selectStr + ' limit 1 ';
        // console.log(sql);
        this.query(sql, function (err, rows, fields) {
            if (err) {
                callback(err, null);
            }else{
                callback(err, rows);
            }
        });
    },

    findDataFromDB: function (table, selectCol, selectCondition, callback) {

        var sql = 'select ' + noSqlInject(selectCol) +' from ' + noSqlInject(table) ;
        // var sql = 'select ' +selectCol+' from ' + table + ' where ' + selectCondition;
        if (selectCondition) {
            sql += ' where ' + noSqlInject(selectCondition);
        };
       // sql += ' limit 1';
//		console.log(sql);
        this.query(sql, function (err, rows, fields) {
            if (err) {
                callback(err);
            }else{
                callback(err, rows);
            }
        });
    },
	findDataFromDB_birthday_charts: function (table, selectCol, selectCondition, someThing, callback) {

		var sql = 'select ' + noSqlInject(selectCol) +' from ' + noSqlInject(table) ;
		// var sql = 'select ' +selectCol+' from ' + table + ' where ' + selectCondition;
		if (selectCondition) {
			sql += ' where ' + noSqlInject(selectCondition);
		};
		// sql += ' limit 1';
		sql = sql.replace(/\\'/g, '\"');
//		console.log(sql);
		this.query(sql, function (err, rows, fields) {
			if (err) {
				callback(err);
			}else{
				callback(err, rows, someThing);
			}
		});
	},
	findDataFromDB_birthday: function (table, selectCol, selectCondition, someThing, callback) {
		var sql = 'select ' + noSqlInject(selectCol) +' from ' + noSqlInject(table) ;
		// var sql = 'select ' +selectCol+' from ' + table + ' where ' + selectCondition;
		if (selectCondition) {
			sql += ' where ' + noSqlInject(selectCondition);
		};
		// sql += ' limit 1';
//		console.log(sql)
		this.query(sql, function (err, rows, fields) {
			if (err) {
				callback(err);
			}else{
				callback(err, rows, someThing);
			}
		});
	},
	findDataFromDB_birthday_match: function (table, selectCol, selectCondition ,callback) {
		var sql = 'select ' + noSqlInject(selectCol) +' from ' + noSqlInject(table) ;
		// var sql = 'select ' +selectCol+' from ' + table + ' where ' + selectCondition;
		if (selectCondition) {
			sql += noSqlInject(selectCondition);
		};
		// sql += ' limit 1';
//		console.log(sql)
		this.query(sql, function (err, rows, fields) {
			if (err) {
				callback(err);
			}else{
				callback(err, rows);
			}
		});
	},
	findDataFromDB_birthday_match_charts: function (table, selectCol, selectCondition ,callback) {
		var sql = 'select ' + noSqlInject(selectCol) +' from ' + noSqlInject(table) ;
		// var sql = 'select ' +selectCol+' from ' + table + ' where ' + selectCondition;
		if (selectCondition) {
			sql += noSqlInject(selectCondition);
		};
		// sql += ' limit 1';
		sql = sql.replace(/\\'/g, '\"');
//		console.log(sql)
		this.query(sql, function (err, rows, fields) {
			if (err) {
				callback(err);
			}else{
				callback(err, rows);
			}
		});
	},
	updateDataToDB_birthday: function (table, fields, selectCondition, someThing, callback) {//table为被插入数据的数据表， fields为键值的字典, id为被更新的记录的索引
		var field = "",
			value = "",
			userValue = "",
			keyValue = "";

		for ( var key in fields) {
			if(fields.hasOwnProperty(key)) {
				userValue = noSqlInject(""+fields[key]);
				keyValue += (noSqlInject(key) +'=' + userValue );
			}
		}
		keyValue = keyValue.substring(0, keyValue.length );
		var sql = 'update ' + noSqlInject(table) + ' set ' +keyValue + ' where ' + selectCondition;
//		console.log(sql)
		this.query(sql, function (err, rows, fields) {
			callback(err, rows, someThing);
		});
	},
	updateDataToDB_S_birthday: function (table, fields, selectCondition, selectConditionValue, someThing, callback) {//table为被插入数据的数据表， fields为键值的字典, id为被更新的记录的索引
		var field = "",
			value = "",
			userValue = "",
			keyValue = "",
			sql = "";

		for ( var key in fields) {
			if(fields.hasOwnProperty(key)) {
				if (typeof fields[key] === 'string') {
					userValue = noSqlInject(fields[key]);
				}else if (typeof fields[key] === 'number') {
					userValue = parseInt(fields[key]);
				}else {
					userValue = fields[key];
				}
				keyValue += (noSqlInject(key) +'=' + '"'+ userValue+'" ,');
			}
		}
		keyValue = keyValue.substring(0, keyValue.length - 1);//最有一个为 “，”要舍去
		if (typeof selectConditionValue === 'number') {
			sql = 'update ' + noSqlInject(table) + ' set ' +keyValue + ' where ' + noSqlInject(selectCondition)  + parseInt(selectConditionValue);
		}else{
			sql = 'update ' + noSqlInject(table) + ' set ' +keyValue + ' where ' + noSqlInject(selectCondition) + ' "' + noSqlInject(selectConditionValue) + '"';
		}
//         console.log(sql);
		this.query(sql, function (err, row, fields) {
			callback(err, row, someThing);
		});
	}


};
///-----------------------------------------------------------------------///

var iweekAnalysisConfig = mysqlConfig.iweekAnalysisConfig;
exports.iweekAnalysis   = new MysqlConnector(iweekAnalysisConfig.host, iweekAnalysisConfig.user, iweekAnalysisConfig.password, iweekAnalysisConfig.database, 3);
var iweekRemindConfig   = mysqlConfig.iweekRemindConfig;
exports.iweekRemind     = new MysqlConnector(iweekRemindConfig.host, iweekRemindConfig.user, iweekRemindConfig.password, iweekRemindConfig.database, 3);
var iweekRemindV1Config = mysqlConfig.iweekRemindV1Config;
exports.iweekRemindV1   = new MysqlConnector(iweekRemindV1Config.host, iweekRemindV1Config.user, iweekRemindV1Config.password, iweekRemindV1Config.database, 3);
//////////////////////////////////////////////////////////////////////////
exports.mongoDBConnector = new MongoDBConnector(mongodbConfig.test.url, mongodbConfig.test.options);

/////////////////////////////////////////////////////////////////////////////
function noSqlInject(str){
    if(str) {
        str = str.toLocaleString();
        str = str.replace(/"/g, '\\"');
        str = str.replace(/'/g, '\\\'');
    }
    return str;
}